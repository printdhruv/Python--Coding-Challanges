"""
#  Programmer     : Dhruv Patel
#  Problem Name   : Insertion Sort
#  Used In        : Python
#  Used As        : Practice
#  Problem        =>
#                       Implementation of Insertion - sort
#  Thoughts       =>
#                       Insertion sort works the way we sort the cards in the hand.
#                       We start with empty left hand and the cards face down on the 
#                       table. We then remove one card at a time from the table and insert
#                       it into the correct postion in the left hand.To find the correct
#                       position for a card, we compare it with each of the card already in
#                       the hand, from right to left.At all times, the cards held in the left
#                       hand are sorted, and these cards were originally the top cards of the
#                       pile on the table.
#                       The algorithms sort the numbers in place so the space - Complexity will
#                       be O(1) just like the bubble sort.
#  Time - Complexity =>
                        Best     -  Ω(n)
                        Average  -  Θ(n^2)
                        Worst    -  O(n^2)

#  Space - Complexity =>
                        Worst    -  Θ(1)
"""
import random
import time
def insertion_sort(x):                             
    l = []
    for j in range(x):
        l.append(random.randint(-9999, 9999))  
    N = len(l)
    start_time = time.time()
    for j in range(1,N):                 
      key = l[j]                          
      i = j - 1                                   
      while i >= 0 and l[i] > key:            
        l[i+1] = l[i]                    
        i = i - 1
        l[i+1] = key
    return time.time() - start_time            

print("The round-time elapsed to sort 1000 elements by insertion sort ", round(insertion_sort(1000)))
print("The round-time elapsed to sort 2000 elements by insertion sort  ", round(insertion_sort(2000)))
print("The round-time elapsed to sort 3000 elements by insertion sort  ", round(insertion_sort(4000)))
print("The round-time elapsed to sort 4000 elements by insertion sort  ", round(insertion_sort(8000)))
print("The round-time elapsed to sort 5000 elements by insertion sort  ", round(insertion_sort(16000)))

'''
Output :-
                        The round-time elapsed to sort 1000 elements by insertion sort  0
                        The round-time elapsed to sort 2000 elements by insertion sort  1
                        The round-time elapsed to sort 3000 elements by insertion sort  2
                        The round-time elapsed to sort 4000 elements by insertion sort  9
                        The round-time elapsed to sort 5000 elements by insertion sort  38
'''

    

    
  
  
