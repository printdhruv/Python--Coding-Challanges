'''
* Programmer     : Dhruv Patel
*  Problem Name   : Average of Levels in Binary Tree
*  Used In        : LeetCode Weekly Contest 40
*  Used As        : Problem
*  Problem      =>
*                   Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
*  Thoughts     => 
*  The following code initializes the class TreeNode and implements a method averageOfLevels which takes the input of a root 
*  and return the list of data_type Float. There are several ways which one can attack this problem. One of the naive way is to
*  use Breadth First Search algorithm to iterate through nodes.
*
*  Sample Input =>
*                    3
*                   / \
*                  9  20
*                    /  \
*                   15   7
*
*  Sample Output =>
*                   [3, 14.5, 11] 
'''
#!/bin/python3
import queue
class TreeNode(object):
    def __init__(self,x):
        self.left = None
        self.right = None
        self.data = x
    @staticmethod
    def averageOfLevels(root):
        list = []
        _queue = queue.Queue()
        _queue.put(root)
        while not _queue.empty():
            length = _queue.qsize()
            sum = 0.0
            for i in range(0,length):
                root = _queue.get()
                sum += root.data
                if root.left is not None:
                    _queue.put(root.left)
                if root.right is not None:
                    _queue.put(root.right)
            list.append(sum/length)
        return list


root = TreeNode(3)
root.left = TreeNode(9)
root.right = TreeNode(20)
root.right.left = TreeNode(15)
root.right.right = TreeNode(7)
print(root.averageOfLevels(root))
