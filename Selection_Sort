"""
#  Programmer     : Dhruv Patel
#  Problem Name   : Selection Sort
#  Used In        : Python
#  Used As        : Practice
#  Problem        =>
#                       Implementation of Selection - sort
#  Thoughts       =>
#                       Insertion sort pick minimum element from range [i+1..N]
#                       and swap it with the
#                       ith element with reference to the outer loop.
#                       The algorithms sort the numbers in place so the space -
#                       Complexity will
#                       be O(1) just like the insertion sort.
#  Time - Complexity =>
                        Best     -  Ω(n)
                        Average  -  Θ(n^2)
                        Worst    -  O(n^2)

#  Space - Complexity =>
                        Worst    -  Θ(1)
"""
import random
import time


def Selection_Sort(noOfElements):
    listOfElements = []
    for i in range(noOfElements):
            listOfElements.append(random.randint(0, 10))
    listOfElements.sort()
    listOfElements.reverse()
#   print("Before sorting",listOfElements)
    start = time.time()
    for i in range(noOfElements - 1):
        key = listOfElements[i]
        j = i + 1
        for k in range(j, noOfElements):
            if listOfElements[k] < key:
                key = listOfElements[k]
                index = k
                listOfElements[i], listOfElements[index] =
                listOfElements[index], listOfElements[i]
        # print("For ith loop ",i , listOfElements)
    # print("After Sorting", listOfElements)
    end = time.time()
    return end - start

print (
      "Time taken to sort 4000   elements with Selection_Sort ",
      round(Selection_Sort(4000))
      )
print (
      "Time taken to sort 8000   elements with Selection_Sort ",
      round(Selection_Sort(8000))
      )
print (
      "Time taken to sort 16000  elements with Selection_Sort ",
      round(Selection_Sort(16000))
      )
print (
      "Time taken to sort 32000  elements with Selection_Sort ",
      round(Selection_Sort(32000))
      )

'''
    Time taken to sort 4000   elements with Selection_Sort  1
    Time taken to sort 8000   elements with Selection_Sort  4
    Time taken to sort 16000  elements with Selection_Sort  16
    Time taken to sort 32000  elements with Selection_Sort  67
'''
