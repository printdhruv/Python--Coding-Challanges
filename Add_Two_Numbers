"""
   Problem Name   : Add Two Numbers (LeetCode - Medium)
   Problem          =>
                       You are given two non-empty linked lists representing two non-negative integers.
                       The digits are stored in reverse order, and each of their nodes contains a single digit.
                       Add the two numbers and return the sum as a linked list.
                       You may assume the two numbers do not contain any leading zero, except the number 0 itself.
   Sample TestCases =>
        Example 1:
                  Input: l1 = [2,4,3], l2 = [5,6,4]
                  Output: [7,0,8]
                  Explanation: 342 + 465 = 807.
        Example 2:
                  Input: l1 = [0], l2 = [0]
                  Output: [0]
        Example 3:
                  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
                  Output: [8,9,9,9,0,0,0,1]

  Thoughts =>         We have to travese the linkedlist l1 and l2 and sum elements from both list while traversing.
                      while traversing carry will be generated if sum exceeds number 10 . we use carry while doing addition
                      in next iteration if any are there and if not then simply append it. There might be a case where lenght of l1 is
                      lesser then l2 or vice versa. in that case, we traverse remaining list.

  Time - Complexity =>
                        Worst    -  O(n) <- where n is representing largest list.
  Space - Complexity =>
                        Worst    -  Î˜(n) <- where n is representing largest list.
 """
class ListNode:
  def __init__(self, val=0, next=None):
      self.val = val
      self.next = next
      
class Solution:

    def calculate(self,answer):
        carry = answer // 10
        answer = answer % 10
        return carry,answer

    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
    
        if not l2:
            return l1
        elif not l1:
            return l2
            
        temp = None
        carry = 0
        
        while l1 and l2:
            answer = l1.val + l2.val + carry
            carry = 0
            if answer > 9:
                carry,answer = self.calculate(answer)
            if not temp:
                temp = ListNode(answer)
                head = temp
            else:
                temp.next = ListNode(answer)
                temp = temp.next
            l1 = l1.next
            l2 = l2.next
            
        while l1:
            answer = l1.val + carry
            carry = 0
            if answer > 9:
                carry, answer = self.calculate(answer)
            temp.next = ListNode(answer)
            temp = temp.next
            l1 = l1.next
            
        while l2:
            answer = l2.val + carry
            carry = 0
            if answer > 9:
                carry, answer = self.calculate(answer)
            temp.next = ListNode(answer)
            temp = temp.next
            l2 = l2.next
            
        if carry > 0:
            temp.next = ListNode(carry)
            
        return head
