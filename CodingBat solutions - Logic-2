'''
#  Programmer     : Dhruv Patel
#  Problem Name   : CodingBat.com
#  Used In        : Python
#  Used As        : Logic-2
#  Thoughts      =>  
#                   This file will contain the solutions for the codingbat.com in attempt to have digest
#                   for my coderschool kids.It's my own version of solutions which might be diffrent then
#                   the actual ones.
'''
'''

'''
   Logic-2 > make_bricks 
                    We want to make a row of bricks that is goal inches long. We have a number of small 
                    bricks (1 inch each) and big bricks (5 inches each). Return True if it is possible 
                    to make the goal by choosing from the given bricks. This is a little harder than it 
                    looks and can be done without any loops. See also: Introduction to MakeBricks.
                    make_bricks(3, 1, 8) → True
                    make_bricks(3, 1, 9) → False
                    make_bricks(3, 2, 10) → True
'''

def make_bricks(small, big, goal):
  if small < 0 or big < 0 or goal < 0:
    return False
  if goal == 0:
    return True
  return make_bricks(small-1 , big , goal-1) or make_bricks(small , big-1 , goal-5)
  
'''
   Logic-2 > lone_sum 
                    Given 3 int values, a b c, return their sum. However, if one of the values is the 
                    same as another of the values, it does not count towards the sum.
                    lone_sum(1, 2, 3) → 6
                    lone_sum(3, 2, 3) → 2
                    lone_sum(3, 3, 3) → 0
''' 

def lone_sum(a, b, c):
  s = set()
  if a!=b and a!=c:
    s.add(a)
  if b!=a and b!=c:
    s.add(b)
  if c!=a and c!=b:
    s.add(c)
  sum = 0
  for i in s:
      sum = sum + i
  return sum
  
'''
   Logic-2 > lucky_sum 
                    Given 3 int values, a b c, return their sum. However, if one of the values is 13 
                    then it does not count towards the sum and values to its right do not count. So 
                    for example, if b is 13, then both b and c do not count.
                    lucky_sum(1, 2, 3) → 6
                    lucky_sum(1, 2, 13) → 3
                    lucky_sum(1, 13, 3) → 1
''' 

def lucky_sum(a, b, c):
  sum = 0
  if a != 13:
    sum = sum + a
  else:
    return sum
  if b != 13:
    sum = sum + b
  else:
    return sum
  if c != 13:
    sum = sum + c
  return sum

'''
   Logic-2 > no_teen_sum 
                    Given 3 int values, a b c, return their sum. However, if any of the values is a 
                    teen -- in the range 13..19 inclusive -- then that value counts as 0, except 15 
                    and 16 do not count as a teens. Write a separate helper "def fix_teen(n):"that 
                    takes in an int value and returns that value fixed for the teen rule. In this 
                    way, you avoid repeating the teen code 3 times (i.e. "decomposition"). Define 
                    the helper below and at the same indent level as the main no_teen_sum().
                    no_teen_sum(1, 2, 3) → 6
                    no_teen_sum(2, 13, 1) → 3
                    no_teen_sum(2, 1, 14) → 3
''' 

def fix_teen(n):
  if n in range(13,20):
    if n != 15 and n!= 16:
      return 0
  return n
def no_teen_sum(a, b, c):
  return fix_teen(a) + fix_teen(b) + fix_teen(c)
  
'''
   Logic-2 > round_sum 
                    For this problem, we'll round an int value up to the next multiple of 10 if its 
                    rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to 
                    the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds 
                    down to 10. Given 3 ints, a b c, return the sum of their rounded values. To 
                    avoid code repetition, write a separate helper "def round10(num):" and call it 
                    3 times. Write the helper entirely below and at the same indent level as round_sum().
                    round_sum(16, 17, 18) → 60
                    round_sum(12, 13, 14) → 30
                    round_sum(6, 4, 4) → 10
''' 

def check(n):
  if n > 9:
    x = n % 10
    if x >= 5:
      return (n/10)*10+10
  else:
    if n < 5:
      return 0
    else :
      return 10
  return (n/10)*10
  
def round_sum(a, b, c):
  return check(a) + check(b) + check(c)
  


